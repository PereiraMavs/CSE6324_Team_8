digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
n = 10

IRs:
n(uint256) := 10(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < n

IRs:
TMP_0(bool) = i < n
CONDITION TMP_0"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
i == 3

IRs:
TMP_1(bool) = i == 3
CONDITION TMP_1"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: CONTINUE 7
"];
7->2;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
i == 5

IRs:
TMP_2(bool) = i == 5
CONDITION TMP_2"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: BREAK 10
"];
10->3;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_3(uint256) := i(uint256)
i(uint256) = i (c)+ 1"];
12->5;
13[label="Node Type: BEGIN_LOOP 13
"];
13->16;
14[label="Node Type: END_LOOP 14
"];
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
i_scope_0 = 0

IRs:
i_scope_0(uint256) := 0(uint256)"];
15->13;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
i_scope_0 < n

IRs:
TMP_4(bool) = i_scope_0 < n
CONDITION TMP_4"];
16->17[label="True"];
16->14[label="False"];
17[label="Node Type: IF 17

EXPRESSION:
i_scope_0 == 3

IRs:
TMP_5(bool) = i_scope_0 == 3
CONDITION TMP_5"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: CONTINUE 18
"];
18->13;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i_scope_0 ++

IRs:
TMP_6(uint256) := i_scope_0(uint256)
i_scope_0(uint256) = i_scope_0 (c)+ 1"];
20->16;
}
